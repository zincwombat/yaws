

logdir = ./logs

# This the path to a directory where additional
# beam code can be placed. The daemon will add this
# directory to its search path

ebin_dir = %YTOP%/test/ibrowse/ebin
include_dir = %YTOP%/test/include



# This is a debug variable, possible values are http | traffic | false
# It is also possible to set the trace (possibly to the tty) while
# invoking yaws from the shell as in
# yaws -i -T -x (see man yaws)

trace = false



# it is possible to have yaws start additional
# application specific code at startup
#
# runmod = mymodule


# By default yaws will copy the erlang error_log and
# end write it to a wrap log called report.log (in the logdir)
# this feature can be turned off. This would typically
# be the case when yaws runs within another larger app

copy_error_log = true


# Logs are wrap logs

log_wrap_size = 1000000


# Possibly resolve all hostnames in logfiles so webalizer
# can produce the nice geography piechart

log_resolve_hostname = false



# fail completely or not if yaws fails
# to bind a listen socket
fail_on_bind_err = true



# If yaws is started as root, it can, once it has opened
# all relevant sockets for listening, change the uid to a
# user with lower accessrights than root

# username = nobody


# If HTTP auth is used, it is possible to have a specific
# auth log.
# Deprecated and ignored. Now, this target must be set in server part
#auth_log = true


# When we're running multiple yaws systems on the same
# host, we need to give each yaws system an individual
# name. Yaws will write a number of runtime files under
# /tmp/yaws/${id}
# The default value is "default"


# id = myname


# earlier versions of Yaws picked the first virtual host
# in a list of hosts with the same IP/PORT when the Host:
# header doesn't match any name on any Host
# This is often nice in testing environments but not
# acceptable in real live hosting scenarios

pick_first_virthost_on_nomatch = true


# All unices are broken since it's not possible to bind to
# a privileged port (< 1024) unless uid==0
# There is a contrib in jungerl which makes it possible by means
# of an external setuid root programm called fdsrv to listen to
# to privileged port.
# If we use this feature, it requires fdsrv to be properly installed.
# Doesn't yet work with SSL.

use_fdsrv = false




# end then a set of virtual servers
# First two virthosted servers on the same IP (0.0.0.0)
# in this case, but an explicit IP can be given as well

<server localhost>
        port = 8000
        listen = 0.0.0.0
        listen_backlog = 512
        auth_log = true
        deflate = true
        docroot = %YTOP%/test/t3/www1 %YTOP%/test/t3/www2
        arg_rewrite_mod = rewritetest

        <auth>
           # Auth needed to access to test1 in www2,
           realm = test1
           dir = /test1
           user = foo:bar
        </auth>

        <auth>
           # Auth needed to access to test2/a.txt in www1,
           # but not for test2/b.txt in www2,
           docroot = %YTOP%/test/t3/www1
           realm = test2
           dir = /test2
           user = foo:bar
        </auth>

        <auth>
           # Auth needed to access to test3 in www1,
           # and all subdirs
           realm = test3
           dir = /test3
           user = foo:bar
        </auth>

        <auth>
           # Use authmod to authenticate users
           realm = test4
           dir = /test4
           authmod = authmodtest
        </auth>

        <auth>
           # Use authmod to authenticate users,
           # it will set the outmod to handle 401 output
           realm = test5
           dir = /test5
           authmod = outmodtest
        </auth>

        <auth>
          # because of order value, 127.0.0.1 is authorized
          realm = test6
          dir = /test6
          deny = all
          allow = 127.0.0.1
          order = deny,allow
        </auth>

        <auth>
          # because of order value, 127.0.0.1 is denied
          realm = test7_1
          dir = /test7
          deny = all
          allow = 127.0.0.1
          order = allow,deny
        </auth>

        <auth>
          # Override previous test to authorized 127.0.0.1
          # (deny target was removed)
          realm = test7_2
          dir = /test7/b.txt
          allow = 127.0.0.1
          order = allow,deny
        </auth>

        <auth>
          # because of order value, all ips are denied
          # (no allow or deny target)
          realm = test8_1
          dir = /test8/a.txt
          order = allow,deny
        </auth>

        <auth>
          # because of order value, all ips are authorized
          # (no allow or deny target)
          realm = test8_2
          dir = /test8/b.txt
          order = deny,allow
        </auth>

        <auth>
          # Use many auth method: authmod + basic auth + acls
          # authorized is Ip=127.0.0.1 and user:pass == foo:baz
          realm = test9
          dir = /test9
          authmod = authmodtest # return false is user:pass != foo:bar
          user = foo:baz
          deny = all
          allow = 127.0.0.1
          order = deny,allow
        </auth>

        # /test11_1 is redirected to /test1. There is no check for /test11_1, so
        # only those on /test1 are applied.

        <auth>
           # /test11_2 is redirected to /test1. So check /test11_2 and /test1:
           #  - Only user foo:bar can access to /test11_2
           #  - Only user foo:bar can access to /test1
           #
           # => Requests to /test11_2 are always accepted for user foo:bar and
           #    denied for everybody else.
           realm = test11_2
           dir = /test11_2
           user = foo:bar
        </auth>

        <auth>
           # /test11_3 is redirected to /test1. So check /test11_3 and /test1:
           #  - Only user foo:baz can access to /test11_3
           #  - Only user foo:bar can access to /test1
           #
           # => Requests to /test11_3 are always rejected
           #   (same user, different password)
           realm = test11_3
           dir = /test11_3
           user = foo:baz
        </auth>

        <auth>
           # /test11_4 is redirected to /test7. So check /test11_4 and /test7:
           #  - Only user foo:bar can access to /test11_4
           #  - /test7/a.txt is forbidden  for 127.0.0.1
           #  - /test7/b.txt is authorized for 127.0.0.1
           #
           # => Requests to /test11_4/a.txt coming from 127.0.0.1 are rejected
           # => Requests to /test11_4/b.txt coming from 127.0.0.1 are accepted
           #    for user foo:bar only
           realm = test11_4
           dir = /test11_4
           user = foo:bar
        </auth>
</server>






